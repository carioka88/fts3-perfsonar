!<arch>
//                                              18        `
UtilsPerfSonar.h/
TcpOptimizer.h/ 1376483248  1000  1000  100664  920       `
/*
 * TcpOptimizer.h
 *
 *  Created on: Aug 2, 2013
 *      Author: rocio
 */

#ifndef TCPOPTIMIZER_H_
#define TCPOPTIMIZER_H_
#include "INetworkLink.h"
#include <list>

class TcpOptimizer {

private:
	TcpOptimizer();
	static TcpOptimizer* myInstance;

protected:
	std::list<INetworkLink::NetworkLinkInfo> listNetworks;

public:

	static TcpOptimizer* getInstance();

	virtual ~TcpOptimizer();

	/*
	 * @brief Get the TCP buffer optimized
	 * @isPush: Boolean that if is true take just the Throughput pushing, and if is false, throughput pulling.
	 * @return float of the TCP buffer optimized
	 * */
	float optimizeTCP(bool isPush);

	/*
	 * @brief Save the network's information
	 * @parameters net: is a NetworkLink that provides information (RTT, source. destination, Throughput) necessary to calculate the TCP buffer size
	 * */
	void saveNetInfo(INetworkLink::NetworkLinkInfo net);
};

#endif /* TCPOPTIMIZER_H_ */
/0              1376474342  1000  1000  100664  1519      `
/*
 * FileProcess.h
 *
 *  Created on: Jul 22, 2013
 *      Author: rocio
 */

#ifndef UTILSPERFSONAR_H_
#define UTILSPERFSONAR_H_

#include "UtilsJson.h"
#include "INetworkLink.h"
#include <curl/curl.h>

class UtilsPerfSonar: public INetworkLink {

private:
	static const char *sourceURL;
	static const char *destinationURL;
	std::list<UtilsJson> fileData;

	/**
	 @brief Read a JsonFile
	 @param ptFile: ptree to read all the Json tree
	 */
	void parserJson(std::string stringFile);

	/**
	 @brief To store the output of a Curl
	 */
	static size_t WriteCallback(void *contents, size_t size, size_t nmemb, void *userp);
public:
	UtilsPerfSonar();
	virtual ~UtilsPerfSonar();

	/**
	 @brief Get the data of a perfsonar.
	 @param source: string that indicate the source
	 @param destination: string that indicate the destination
	 @param url: url given for the client
	 @return FileProcess: to extract some information
	 */
	 NetworkLinkInfo getInfo(std::string source, std::string dest);

	/**
	 @brief Calculate the throughput pushing
	 @return the throughput pushing
	 */
	float getThroughputPushing();

	/**
	 @brief Calculate the throughput pulling
	 @return the throughput pulling
	 */
	float getThroughputPulling();

	/**
	 @brief Get the Round Trip Time
	 @return the RTT
	 */
	float getRTT();

	/**
	 @brief Print the information of a list of manageJson that contains information of a Json's file
	 */
	friend std::ostream& operator<<(std::ostream &out, UtilsPerfSonar& fp);

};

#endif /* UTILSPERFSONAR_H_ */

UtilsJson.h/    1376481528  1000  1000  100664  3944      `
/*
 * manageJson.h
 *
 *  Created on: Jul 22, 2013
 *      Author: rocio
 */

#ifndef UTILSJSON_H_
#define UTILSJSON_H_

#include <iostream>
#include <fstream>
#include <stdio.h>
#include <list>
#include <string.h>
#include <exception>
#include <boost/array.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#ifdef _MSC_VER
#include <boost/config/compiler/visualc.hpp>
#endif
#include <boost/foreach.hpp>

class UtilsJson {


public:
	struct parameters{
		std::string unit;
		std::string description;
		float value;
	};
	struct summaryJson{
		std::string summary_Json;		// summary file
		int id_Json;					// id file
		std::string monitor_Json;		// monitor file
		std::string source_Json;		// source file
		int status_Json;						// status
		std::string lastCheckTime_Json;	// last check time file
		std::string destination_Json;		// destination
		parameters avg_Json;
		parameters max_Json;
		parameters min_Json;
		parameters sigma_Json;
	};

private:
	static const char* throughput;
	static const char* throughputWarning;
	summaryJson myInfo;

public:
	/**
	 @brief Default constructor
	 */
	UtilsJson();

	/**
	 @brief Default destructor
	 */
	virtual ~UtilsJson();

	/**
	 @brief Constructor with parameters
	 @param newInfo: SummaryJson information
	 */
	UtilsJson(summaryJson newInfo);

	UtilsJson::summaryJson getStructure();

	/**
	 @brief Modifies a summaryJson
	 @param newInfo: SummaryJson information
	 */
	void setStructure(summaryJson newInfo);

	/**
	 @brief Print all the values of a manageJson
	 */
	friend std::ostream& operator<<(std::ostream& out, UtilsJson& fp);

	/**
	 @brief Check if the summary of a manageJson is "PS_CHECK_THROUGHPUT OK"
	 @return true if the Summary is "PS_CHECK_THROUGHPUT OK", false if it is not
	 */
	bool isThroughput();

	/**
	 @brief Check if the source and monitor are the same, is pushing or pulling data.
	 @return true if the source and monitor are the same(pushing data), false if they are not (pulling data)
	 */
	bool isPushorPull();

	/**
	 @brief Get the monitor's summaryJson
	 @return the monitor's summaryJson
	 */
	std::string getMonitor();

	/**
	 @brief Get the source's summaryJson
	 @return the source's summaryJson
	 */
	std::string getSource();

	/**
	 @brief Get the destination's summaryJson
	 @return the destination's summaryJson
	 */
	std::string getDestination();

	/**
	 @brief Get the average throughput value of a manageJson
	 @return a float, the average
	 */
	float getAvg();

	/**
	 @brief Get the maximum throughput value of a manageJson
	 @return a float, the maximum
	 */
	float getMax();

	/**
	 @brief Get the minimum throughput value of a manageJson
	 @return a float, the minimum
	 */
	float getMin();

	/*
	 * @brief Set the average value of a manageJson
	 * @param avg: float to set the average
	 * */
	void setAvg(float avg);

	void setAvgDescription(std::string avg_description);
	void setAvgUnit(std::string avg_unit);

	/*
	* @brief Set the maximum value of a manageJson
	* @param max: float to set the maximum
	* */
	void setMax(float max);

	void setMaxDescription(std::string max_description);
	void setMaxUnit(std::string max_unit);

	/*
	* @brief Set the minimum value of a manageJson
	* @param min: float to set the minimum
	* */
	void setMin(float min);

	void setMinDescription(std::string min_description);
	void setMinUnit(std::string min_unit);

	/*
	* @brief Set the sigma value of a manageJson
	* @param sigma: float to set the sigma
	* */
	void setSigma(float sigma);

	void setSigmaDescription(std::string sigma_description);
	void setSigmaUnit(std::string sigma_unit);

	void setId(int id_Json);
	void setMonitor(std::string monitor_Json);
	void setSource(std::string source_Json);
	void setStatus(int status_Json);
	void setCheckTime(std::string lastCheckTime_Json);
	void setDestination(std::string destination_Json);

	void setSummary(std::string summary);


};

#endif /* UTILSJSON_H_ */
